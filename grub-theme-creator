#!/usr/bin/env bash
#####################################################################
## ===================== Disclaimer ============================== ##
## This script-program is a proof-of-concept project and           ##
## a self training playground on Bash scripting.                   ##
## It is free for copy and use, while I am not responsible for any ##
## damage on your software or hardware. Use at your own risk!      ##
## It would be kind if you report any possible bugs, or ideas for  ##
## smart improvement of current code logic and possible new        ##
## features that are relevant.                                     ##
## =============================================================== ##

#####################################################################
##                    grub-theme-creator                           ##
##                     alias PrettyGrug                            ##
## This script will create a grub theme based on provided settings ##
## compatible with horizontal-grub script, to conform a theme      ##
## with fake-horizontal style.                                     ##
## It can be customized, so it can create usual grub themes.       ##
## It is supposed to be a base tool, which might be used from      ##
## theme developers to create even more artistic themes.           ##
## =============================================================== ##
#####           petsam's "Adventures in Bash"                   #####
#####################################################################

# Create work directory
function CreateWorkDir {
	DateSuffix="pg-"$(date +%s)
	if [ ! -z "$TMPDIR" ];then
		#echo "TMPDIR =" $TMPDIR
		WorkDir="$TMPDIR"/prettygrub-"$DateSuffix"
		[ "$ShowActivity" = "true" ] && echo "Using system TMPDIR " $WorkDir
		exit;
	elif [ -d /tmp ];then
		WorkDir=/tmp/prettygrub-"$DateSuffix"
	else
		WorkDir=$HOME/.local/tmp/prettygrub-"$DateSuffix"
	fi
	mkdir -p "$WorkDir"
	cd $WorkDir
	[ "$ShowActivity" = "true" ] && echo "Created working directory :" "$WorkDir"
	TmpErrors="$WorkDir/errors.log"

}

function BatchCopy {
		BatchFiles=""
		CurrentResourceLeft=${1%\**}
		CurrentResourceRight=${1#*\*}
		BatchFiles=($(ls "$2"${1/*/\*}  2>$TmpErrors))
		if [ -z "${#BatchFiles[@]}" ]; then
			[ "$ShowActivity" = "true" ] && echo "No files found for batch copy."
			return 0;
		fi
		fcopied=0
		for bFile in ${BatchFiles[@]}
			do
				bFileName=${bFile##*/}
				FileLeft=${bFileName%_*}"_"
				FileRight="."${bFileName#*\.}
				if [ $FileLeft = "$CurrentResourceLeft" ] && [ $FileRight = "$CurrentResourceRight" ]; then
					cp "$2""$bFileName" "$WorkDir"/
					if [ "$?" -eq 0 ]; then (( fcopied++ )); fi
					[ "$ShowActivity" = "true" ] && echo "Copying " "$2""$bFileName"
				fi
			done
		return $fcopied;
}

# TransformImage params are the target width and height of the image
function TransformImage {
	ImageWidth=$1
	ImageHeight=${2/"^none$"/""}
	Image=$3
	echo "Converting " $Image to $ImageWidth x $ImageHeight to $WorkDir
	if [ $ImageWidth = "" ] ; then
		echo "Target image width was not provided. Aborting conversion.."
		return 2 ;
	else
		convert ${Image}  -background None  -scale ${ImageWidth}${ImageHeight:+"x$ImageHeight"} "$WorkDir"/${Image##*\/} 2>$TmpErrors
	fi
}

function PickResources {
ResourceType=$1
shift
SettingName=$1
shift
ResourceSetting=$*
CurrentResource=""
if [ "$ResourceType" != "SETTING" ] && [ "$ResourceSetting" != "" ]; then
	if [ "$ResourceType" = "fonts" ]; then
		CurrentSetting=$(echo $ResourceSetting | cut -d, -f2,3,4 | tr -d \")
		CurrentResource=$(echo $ResourceSetting | cut -d, -f1 | tr -d \")
	else
		CurrentSetting=$ResourceSetting
		CurrentResource=$ResourceSetting
	fi
	if ! [ ${CurrentResource#*\*} = $CurrentResource ]; then
		[ "$ShowActivity" = "true" ] && echo Copying "$CurrentResource" from "$Resources"/
		BatchCopy "$CurrentResource" "$Resources"/
		BCResult=$?
#		echo $BCResult
		if [ $BCResult = 0 ]; then
			[ "$ShowActivity" = "true" ] && echo "Using default resource" "$DefaultResources"/${ResourceType:+"$ResourceType"/}
			BatchCopy $CurrentResource "$DefaultResources"/${ResourceType:+"$ResourceType"/}
			if [ $? = 0 ]; then
				echo "Could not find Default Resource. Is something wrong?..."
			fi
		fi
	else
		if [ -d "$Resources"/$CurrentResource ] || [ -r "$Resources"/$CurrentResource ]; then
			[ "$ShowActivity" = "true" ] && echo "Found " "$Resources"/$CurrentResource
			CurrentResource="$Resources"/$CurrentResource
		elif [ -d "$DefaultResources"/${ResourceType:+"$ResourceType"/}$CurrentResource ] || [ -r "$DefaultResources"/${ResourceType:+"$ResourceType"/}$CurrentResource ]; then
			[ "$ShowActivity" = "true" ] && echo "Using default" "$DefaultResources"/${ResourceType:+"$ResourceType"/}$CurrentResource
			CurrentResource="$DefaultResources"/${ResourceType:+"$ResourceType"/}$CurrentResource
		else
			echo "Could not find " $CurrentResource
			return 0;
		fi

	fi
	if [ "$ResourceType" = "icons" ]; then
		mkdir "$WorkDir"/icons
		if [ $UseTopMenu = "true" ]; then
			[ "$ShowActivity" = "true" ] && echo "Converting and copying icons from " $CurrentResource " to " "$WorkDir"/icons
			for DistroIcon in $(ls $CurrentResource/*); do
				convert "$DistroIcon" -resize "$TopMenuIconWidth" -background None -gravity South -extent ${TopMenuIconWidth}x${TopMenuIconHeight} "$WorkDir"/icons/${DistroIcon##*\/}  2>$TmpErrors
			done
		else
			[ "$ShowActivity" = "true" ] && echo "Copying icons from " $CurrentResource " to " "$WorkDir"/icons
			cp -r $CurrentResource/* "$WorkDir"/icons/ 2>$TmpErrors
		fi
	elif [ "$ResourceType" = "clock" ] || [ "$ResourceType" = "logos" ] || [ "$ResourceType" = "wallpapers" ]; then
		case $SettingName in
		PG_WallpaperImage)
			if [ ! "$GrubResolution" = "" ]; then
				TransformImage ${GrubResolution%x*} ${GrubResolution#*x} $CurrentResource
			else
				cp -r $CurrentResource "$WorkDir"/  2>$TmpErrors
			fi
		;;
		PG_PGLogo)TransformImage $LogoWidth $LogoHeight $CurrentResource
		;;
		PG_ClockCenterImage)TransformImage $ClockWidth $ClockHeight $CurrentResource
		;;
		PG_ClockTickImage)TransformImage $(($ClockWidth/10)) $(($ClockWidth/10)) $CurrentResource
		;;
		*)echo "$ResourceType $CurrentResource not found"
		;;
		esac
	else
		cp -r $CurrentResource "$WorkDir"/  2>$TmpErrors
	fi
else
	CurrentSetting=$ResourceSetting
fi

if [ "$CurrentSetting" = "" ]; then
	sed -i '/'"$SettingName"'/d' "$WorkDir"/theme.txt
else
	#echo "$SettingName" set to "$CurrentSetting"
	sed -i 's/'"$SettingName"'/'"$CurrentSetting"'/g' "$WorkDir"/theme.txt
fi
}

function GetPaths {

# Configuration paths
[ -r "$SystemDataPath"/prettygrub.conf ] && . "$SystemDataPath"/prettygrub.conf
[ -r "$LocalDataPath"/prettygrub.conf ] && . "$LocalDataPath"/prettygrub.conf
[ -d "$LocalDataPath"/templates/"$DefaultTemplate" ] && DefaultTemplate="$LocalDataPath"/templates/"$DefaultTemplate" || DefaultTemplate="$SystemDataPath"/templates/"$DefaultTemplate"
[ "$ShowActivity" = "true" ] && echo "Default Template: " "$DefaultTemplate"
if  [ -d "$LocalDataPath"/templates/"$PGTemplate" ] ; then
	Template="$LocalDataPath"/templates/"$PGTemplate"
elif [ -d "$SystemDataPath"/templates/"$PGTemplate" ]; then
	Template="$SystemDataPath"/templates/"$PGTemplate"
else
	echo "Template "$PGTemplate" is missing. Exiting..."
	exit;
fi
[ "$ShowActivity" = "true" ] && echo "Template:" "$Template"
DefaultResources="$DefaultTemplate"/resources
Resources="$Template"/resources
[ "$ShowActivity" = "true" ] && echo "Default Resources:" "$DefaultResources"
[ "$ShowActivity" = "true" ] && echo "Resources" "$Resources"
}



function GetConfig {

if [ -r "$DefaultTemplate"/default.conf ]; then . "$DefaultTemplate"/default.conf; fi
if [ -r "$Template"/default.conf ]; then . "$Template"/default.conf; fi
if [ ${CustomAspectRatio:+defined} ]; then AspectRatio="$CustomAspectRatio"; fi
if [ -r "$DefaultTemplate"/"$AspectRatio".conf ]; then . "$DefaultTemplate"/"$AspectRatio".conf; fi
if [ ${CustomGrubResolution:+defined} ]; then GrubResolution="$CustomGrubResolution"; fi
if [ -r "$DefaultTemplate"/"$GrubResolution".conf ]; then . "$DefaultTemplate"/"$GrubResolution".conf ; fi
if [ -r "$Template"/default.conf ]; then . "$Template"/default.conf; fi
if [ ${CustomAspectRatio:+defined} ]; then AspectRatio="$CustomAspectRatio"; fi
if [ -r "$Template"/"$AspectRatio".conf ]; then . "$Template"/"$AspectRatio".conf; fi
if [ ${CustomGrubResolution:+defined} ]; then GrubResolution="$CustomGrubResolution"; fi
if [ -r "$Template"/"$GrubResolution".conf ]; then . "$Template"/"$GrubResolution".conf ; fi

# Apply command-line overrides
HorizontalGrub=${CustomHorizontalGrub:-$HorizontalGrub}
AutoActions=${CustomAutoActions:-$AutoActions}
SliceMenu=${CustomSliceMenu:-$SliceMenu}
[ "$ShowActivity" = "true" ] && echo "AspectRatio" "$AspectRatio"
[ "$ShowActivity" = "true" ] && echo "GrubResolution" "$GrubResolution"
[ "$ShowActivity" = "true" ] && echo "SliceMenu" "$SliceMenu"
#[ "$ShowActivity" = "true" ] && echo "Resources" "$Resources"
#[ "$ShowActivity" = "true" ] && echo "Resources" "$Resources"

}

function GetNewCoordinates {
	PassedCoord=$1
	shift
	PromptTitleCoord="$@"
	#(IFS= echo "$@" | tr "^" " ")
	while true;
	do
	read -p "Do you want to change ${PromptTitleCoord//^/\ } ?
			[Y]es [N]o : " PGChangeCoordinates
		case $PGChangeCoordinates in
			[Yy])read -i "$PassedCoord" -p "Enter new shape coordinates (WIDTHxHEIGHT+LEFT+TOP) Current $PassedCoord : " NewCoordinates
				if [[ ! $NewCoordinates =~ [0-9]x[0-9]+[0-9]+[0-9] ]]; then
					echo "Invalid coordinates entered. Try again."
				else
					break ;
				fi
				;;
			[Nn]) NewCoordinates=""
				break ;;
			*) echo " You have to  answer [Y]es or [N]o." ;;
		esac
	done
	#return "$NewCoordinates"

}

# PARAMS TYPE SETTING , example: (wallpapers)
function GetImage {
[ -r "$DefaultTemplate"/"$1"/"$2" ] && GotImage="$DefaultTemplate"/"$1"/"$2"
[ -r "$Template"/resources/"$2" ] && GotImage="$Template"/resources/"$2"

}


function SliceImageToBitmaps {
#magick convert -size 70x70 canvas:none -fill red -draw 'circle 35,35 10,30' red-circle.png
	GetImage "wallpapers" $WallpaperImage
	PreviewWallpaper=${GotImage:-$DefaultResources/wallpapers/sgs-dark-plasma-16_9.png}
	unset GotImage
	OriginalImage=$1
#if [ "$GrubResolution" = "" ]; then
#else
#	ImageWidth=${GrubResolution%x*}
#	ImageHeight=${GrubResolution#*x}
#fi
	ImageWidth=$(identify -format "%w" $OriginalImage)
	ImageHeight=$(identify -format "%h" $OriginalImage)
	if [ "$2" = "auto" ]; then
		echo "Auto-slice menu bitmaps not tested yet." - # && exit
		InsideMenuHeight=$MainMenuHeight
		InsideMenuWidth=$MainMenuWidth
		InsideLeft=$(($(($ImageWidth-$InsideMenuWidth))/2))
		InsideTop=$(($(($ImageHeight-$InsideMenuHeight))/2))
		NewCoordinates="$InsideMenuWidth"x"$InsideMenuHeight"+${InsideLeft}+${InsideTop}
	else
		NewCoordinates="$2"
	fi
	until [ "$NewCoordinates" = "" ]; do
		[ "$ShowActivity" = "true" ] && echo MenuGeometry "$NewCoordinates" Image $OriginalImage
		# pattern:HS_HORIZONTAL pattern:GRAY40 "$DefaultResources"/other/sample-menu.png
		convert  +repage "$OriginalImage" pattern:GRAY40  -geometry !"$NewCoordinates" -composite +repage -  2>$TmpErrors | display  -sample "$PreviewResolution" -title "Preview Shape - %wx%h" -
		OldCoordinates="$NewCoordinates"
		NewCoordinates=""
		GetNewCoordinates "$OldCoordinates" "Main^Menu^Shape"
	done
	BitmapsImagePreview="$WorkDir"/bitmappreview.png
	convert  "$OriginalImage" "$DefaultResources"/other/sample-menu.png  -geometry !"$OldCoordinates" -composite "$BitmapsImagePreview"
	BitmapsCutGeometry="$OldCoordinates"
	NewCoordinates="$MainMenuWidth"x"$MainMenuHeight"+"$MainMenuLeft"+"$MainMenuTop"
	until [ "$NewCoordinates" = "" ]; do
		#[ "$ShowActivity" = "true" ] && echo ConvertedMenu $RunImage Geometry "${GrubResolution}"+${MainMenuLeft}+${MainMenuTop}
		convert -resize !"$GrubResolution" $PreviewWallpaper $OriginalImage -geometry !"$NewCoordinates" -composite +repage -  2>$TmpErrors | display  -sample "$PreviewResolution" -title "Preview Position - %wx%h" -
		OldCoordinates="$NewCoordinates"
		NewCoordinates=""
		GetNewCoordinates "$OldCoordinates" "Main_Menu_Position"
	done
	BitmapsPositionGeometry="$OldCoordinates"
	echo Cutting "$OriginalImage" "$BitmapsCutGeometry"
	CutBipmaps "$OriginalImage" "$BitmapsCutGeometry"
	if [ ${GrubResolution-empty} = "empty" ] || [ ${OriginalImage-empty} = "empty" ] || [ ${BitmapsCutGeometry-empty} = "empty" ] || [ ${BitmapsPositionGeometry-empty} = "empty" ]; then
		echo "Incomplete settings collected. Template will not be adjusted automatically."
	else
		ChangeTemplateSettings $GrubResolution $NewBitmap $BitmapsPositionGeometry

	fi
	NewBitmap="" && BitmapsPositionGeometry=""
}

function ChangeTemplateSettings {
	#[ $(grep "^SliceMenu=" "$Template"/default.conf) ] && sed -i '/^SliceMenu=/ s/[[:print:]]*/#SliceMenu=\"'$3'\"/g' "$Template"/"$1".conf
	[ ! -w "$Template"/"$1".conf ] && touch "$Template"/"$1".conf 2>$TmpErrors
	[ $(grep "^SliceMenu=" "$Template"/"$1".conf) ] && sed -i 's|^SliceMenu=|^#SliceMenu=|g' "$Template"/"$1".conf 2>$TmpErrors
	echo "SliceMenu=\"\"" >> "$Template"/"$1".conf 2>$TmpErrors
	echo "MainMenuBitmaps="${2##*/}"_*.png" >> "$Template"/"$1".conf 2>$TmpErrors
	ElementSize=${3%%+*} #  500x400
	ElementPosition=${3#*+}  # 30+70
	ElementWidth=${ElementSize%x*}
	ElementHeight=${ElementSize#*x}
	ElementLeft=${ElementPosition%+*}
	ElementTop=${ElementPosition#*+}
	echo "MainMenuWidth="\"$ElementWidth\" >> "$Template"/"$1".conf 2>$TmpErrors
	echo "MainMenuHeight="\"$ElementHeight\" >> "$Template"/"$1".conf 2>$TmpErrors
	echo "MainMenuLeft="\"$ElementLeft\" >> "$Template"/"$1".conf 2>$TmpErrors
	echo "MainMenuTop="\"$ElementTop\" >> "$Template"/"$1".conf 2>$TmpErrors

}

function CutBipmaps {

BitmapOriginalImage="$1"
NewBitmap=${BitmapOriginalImage##*/}
NewBitmap="${NewBitmap%\.*}$GrubResolution"
[ $PreviewWindow = "true" ] && NewBitmap="$Template/resources/$NewBitmap" || NewBitmap="$WorkDir/$NewBitmap"
ImageWidth=$(identify -format "%w" $1)  #   800
ImageHeight=$(identify -format "%h" $1)  #   900
CutCoordinates=$2
CoordSize=${CutCoordinates%%+*} #  500x400
CoordOffset=${CutCoordinates#*+}  # 30+70

SliceLeftWidth=${CoordOffset%+*}  # 30
SliceMiddleWidth=${CoordSize%x*}  #  500
SliceRightWidth=$(($ImageWidth-$SliceLeftWidth-$SliceMiddleWidth))  #  270
SliceTopHeight=${CoordOffset#*+}  #  70
SliceCenterHeight=${CoordSize#*x}   #  400
SliceBottomHeight=$(($ImageHeight-$SliceTopHeight-$SliceCenterHeight))   #  430

convert $BitmapOriginalImage -crop $(($SliceLeftWidth-1))x$(($SliceTopHeight-1))+0+0 +repage ${NewBitmap}_nw.png 2>$TmpErrors
[ $? -le 1 ] && [ "$ShowActivity" = "true" ] && echo "NorthWest done " $(($SliceLeftWidth-1))x$(($SliceTopHeight-1))+0+0 $? || echo "Error $? :Failed to create " ${NewBitmap}_nw.png
convert $BitmapOriginalImage +repage -crop "$SliceMiddleWidth"x$(($SliceTopHeight-1))+$(($SliceLeftWidth-1))+0 +repage ${NewBitmap}_n.png 2>$TmpErrors
[ $? -le 1 ] && [ "$ShowActivity" = "true" ] && echo "North done " "$SliceMiddleWidth"x$(($SliceTopHeight-1))+$(($SliceLeftWidth-1))+0 $? || echo "Error $? :Failed to create " ${NewBitmap}_n.png
convert $BitmapOriginalImage +repage -crop $(($SliceRightWidth-1))x$(($SliceTopHeight-1))+$(($SliceLeftWidth+$SliceMiddleWidth-2))+0 +repage ${NewBitmap}_ne.png 2>$TmpErrors
[ $? -le 1 ] && [ "$ShowActivity" = "true" ] && echo "NorthEast done " $(($SliceRightWidth-1))x$(($SliceTopHeight-1))+$(($SliceLeftWidth+$SliceMiddleWidth-2))+0 $? || echo "Error $? :Failed to create " ${NewBitmap}_ne.png
convert $BitmapOriginalImage +repage -crop $(($SliceLeftWidth-1))x"$SliceCenterHeight"+0+$(($SliceTopHeight-1)) +repage ${NewBitmap}_w.png 2>$TmpErrors
[ $? -le 1 ] && [ "$ShowActivity" = "true" ] && echo "West done " $(($SliceLeftWidth-1))x"$SliceCenterHeight"+0+$(($SliceTopHeight-1)) $? || echo "Error $? :Failed to create " ${NewBitmap}_w.png
convert $BitmapOriginalImage +repage -crop "$SliceMiddleWidth"x"$SliceCenterHeight"+$(($SliceLeftWidth-1))+$(($SliceTopHeight-1)) +repage ${NewBitmap}_c.png 2>$TmpErrors
[ $? -le 1 ] && [ "$ShowActivity" = "true" ] && echo "Center done " "$SliceMiddleWidth"x"$SliceCenterHeight"+$(($SliceLeftWidth-1))+$(($SliceTopHeight-1))  $? || echo "Error $? :Failed to create " ${NewBitmap}_c.png
convert $BitmapOriginalImage +repage -crop $(($SliceRightWidth-1))x"$SliceCenterHeight"+$(($SliceLeftWidth+$SliceMiddleWidth-2))+$(($SliceTopHeight-1)) +repage ${NewBitmap}_e.png 2>$TmpErrors
[ $? -le 1 ] && [ "$ShowActivity" = "true" ] && echo "East done " $(($SliceRightWidth-1))x"$SliceCenterHeight"+$(($SliceLeftWidth+$SliceMiddleWidth-2))+$(($SliceTopHeight-1)) $? || echo "Error $? :Failed to create " ${NewBitmap}_e.png
convert $BitmapOriginalImage +repage -crop $(($SliceLeftWidth-1))x$(($SliceBottomHeight-1))+0+$(($SliceTopHeight+$SliceCenterHeight-2)) +repage ${NewBitmap}_sw.png 2>$TmpErrors
[ $? -le 1 ] && [ "$ShowActivity" = "true" ] && echo "SouthWest done " $(($SliceLeftWidth-1))x$(($SliceBottomHeight-1))+0+$(($SliceTopHeight+$SliceCenterHeight-2))  $? || echo "Error $? :Failed to create " ${NewBitmap}_sw.png
convert $BitmapOriginalImage +repage -crop "$SliceMiddleWidth"x$(($SliceBottomHeight-1))+$(($SliceLeftWidth-1))+$(($SliceTopHeight+$SliceCenterHeight-2)) +repage ${NewBitmap}_s.png 2>$TmpErrors
[ $? -le 1 ] && [ "$ShowActivity" = "true" ] && echo "South done " "$SliceMiddleWidth"x$(($SliceBottomHeight-1))+$(($SliceLeftWidth-1))+$(($SliceTopHeight+$SliceCenterHeight-2)) $? || echo "Error $? :Failed to create " ${NewBitmap}_s.png
convert $BitmapOriginalImage +repage -crop $(($SliceRightWidth-1))x$(($SliceBottomHeight-1))+$(($SliceLeftWidth+$SliceMiddleWidth-2))+$(($SliceTopHeight+$SliceCenterHeight-2)) +repage ${NewBitmap}_se.png 2>$TmpErrors
[ $? -le 1 ] && [ "$ShowActivity" = "true" ] && echo "SouthEast done " $(($SliceRightWidth-1))x$(($SliceBottomHeight-1))+$(($SliceLeftWidth+$SliceMiddleWidth-2))+$(($SliceTopHeight+$SliceCenterHeight-2)) $? || echo "Error $? :Failed to create " ${NewBitmap}_se.png
}



GTCVersion="$0 Version: 0.1.0-alpha-1"
RealUser=$(whoami)

# Application system and local paths
SystemDataPath=/usr/share/prettygrub
LocalDataPath=${XDG_DATA_HOME:-$HOME/.local/share}/prettygrub
# Default templates
DefaultTemplate="default"
PGTemplate=$DefaultTemplate
SampleMenuEntry=$(uname -osrp)

PrettygrubHelp=$0" will create a grub theme based on provided settings,
    compatible with horizontal-grub script, to conform a theme with fake-horizontal style.

    Usage:
     -t | --template  [TEMPLATE] {Required}
                     The template folder name, containing configuration files and a \"resources\" folder with custom images
                     If the parameter is not used, the default template will be used

     -h | --help
                     This help information message

     -V | --version
                     Show program version

     -a | --aspectratio [ASPECTRATIO] {optional}
                     [ASPECTRATIO] in the form of NUMBER_NUMBER. If the parameter is used, the value is required.
                     This might be helpful in cases when grub resolution is not the same as the real monitor resolution

     -r | --resolution [RESOLUTION] {optional}
                     [RESOLUTION] in the form of WIDTHxHEIGHT in pixels. If the parameter is used, the value is required.
                     This might be helpful in cases when grub resolution is not the same as the real monitor resolution

     -p | --prettygrub  {optional}
                     If you use horizontal-grub type theme, use this parameter to run horizontal-grub when setting as active theme

     -s | --slice  [COORDINATES]  {optional}
                    Generate pixmap image-sets out of one provided image. A preview window helps fine adjust this setting.
                    [COORDINATES] value has the form of WIDTHxHEIGHT+LEFT+TOP in pixels and used once for setting cutting shape and
                    once for setting element size and position on the theme in the specified resolution.
                    If used with --window-preview, it generates bitmap images and relevant settings for the used resolution.

     -w | --window-preview    {optional}
                     Show only previews of shaping and positioning of elements. Do not generate a theme.
                        Useful when generating missing configuration files for several resolutions.

     -x | --scripted [ACTION]  {optional}
                     Used to automate theming or horizontal-grub invocation in scripts. Available options are:
                     SaveLocal (saves produced theme to local home folder)
                     SaveSystem (saves produced theme to system folder) [requires admin privileges]
                     SetActiveTheme (as SaveSystem, then copies the theme to /boot/grub/themes,
                       changes /etc/default/grub GRUB_THEME value, runs update-grub and if -p is provided,
                       runs horizontal-grub) [requires admin privileges]
     -v | --verbose
                    Show more detailed information in the output
				"


PrettygrubHeading="
#### Automatically created grub theme by grub-theme-creator ####
# PrettyGrub project by @petsam
# Auto-generate proper resources and settings per custom resolution
"

# Check for given command line parameters

if [ $# -eq 0 ]; then
	echo -e "$PrettygrubHelp"
	exit;
else
	while [ "${1+defined}" ]; do
		case "$1" in
			-h|--help) echo -e "$PrettygrubHelp"
				exit;
				;;
			-V|--version) echo $GTCVersion
				exit;
				;;
			-v|--verbose) ShowActivity="true"
				shift
				;;
			-t|--template) shift
				if [ "${1+defined}" ] && [ ! "${1#-}" = "-" ]; then
					PGTemplate="$1"
					shift
				else
					echo "Template parameter is required. Exiting..."
					exit;
				fi
				;;
			-a|--aspectratio) shift
				if [[ $1 =~ [0-9]_[0-9] ]]; then
					CustomAspectRatio="$1"
					shift
				else
					echo "Invalid argument for Aspect Ratio"
					echo -e "$PrettygrubHelp"
					exit;
				fi
				;;
			-r|--resolution) shift
				if [[ $1 =~ [0-9]x[0-9] ]]; then
					CustomGrubResolution="$1"
					shift
				else
					echo "Invalid argument for Grub Resolution"
					echo -e "$PrettygrubHelp"
					exit;
				fi
				;;
			-p|--prettygrub) CustomHorizontalGrub="true"
				shift
				;;
			-w|--window-preview) PreviewWindow="true"
				shift
				;;
			-s|--slice) shift
				if [ "${1:+defined}" ] && [ ! "${1#-}" = "-" ]; then
					if [[ $1 =~ [0-9]x[0-9]+[0-9]+[0-9] ]]; then
						CustomSliceMenu="$1"
						shift
					else
						echo "Invalid argument for --slice"
						echo -e "$PrettygrubHelp"
						exit;
					fi
				else
					SliceMenu="auto"
				fi
				#echo $SliceMenu
				;;
			-x|--scripted) shift
				if [ "${1:+defined}" ] && [ ! "${1#-}" = "-" ]; then
					CustomAutoActions="$1"
					shift
				fi
				;;
			*)	echo "Unknown argument $1"
				echo "Exiting..."
				exit;;
		esac
	done
fi

# Check if run as root or sudo
if (( $(id -u) == 0 )); then
	IAMROOT="true"
#	echo "The script is run as root"
fi
#[ $IAMROOT ] && echo "I am Root" || echo "I am NOT Root"

GetPaths
GetConfig
if [[ "${SliceMenu:+defined}" ]] ; then
	if [ $(which magick) ] && [ $(which convert) ] && [ $(which display) ]; then
		[ "$ShowActivity" = "true" ] && echo Magick is available
	else
		echo Magick is not installed. You cannot use the "slice" function.
		exit;
	fi
fi

PreviewResolution=$((${GrubResolution%x*}/2))
CreateWorkDir
if [[ "${SliceMenu:+defined}" ]] && [[ ! $(echo ${MainMenuBitmaps/\*/ISBITMAPS/} | grep -o ISBITMAPS) = "ISBITMAPS" ]]; then
	if [ -r "$Resources"/"$MainMenuBitmaps" ]; then
		ImageToSlice="$Resources"/"$MainMenuBitmaps"
	else
		echo "Image for Main Menu bitmaps was not found. Exiting..."
		exit;
	fi
else
	[ "$ShowActivity" = "true" ] && echo SliceMenu  "${SliceMenu:-empty}"  MainMenuBitmaps "$MainMenuBitmaps"
	echo "MainMenuBitmaps setting is not valid. Exiting..."
fi
[ ${ImageToSlice:+defined} ] && SliceImageToBitmaps "$ImageToSlice" "$SliceMenu"
GetConfig
#if [ ! "$BitmapsPositionGeometry" = "" ]; then
# TODO Set new menu left and top
	echo $BitmapsPositionGeometry
#fi
[[ "${PreviewWindow:-false}" = "true" ]] && exit;
[ "$ShowActivity" = "true" ] && echo "Transforming " $Template

# Write settings and copy resources to theme temp folder

echo -e "$PrettygrubHeading" > "$WorkDir"/theme.txt 2>$TmpErrors
if  [ -r "$Template"/theme.txt ]; then
	cat "$Template"/theme.txt >> "$WorkDir"/theme.txt 2>$TmpErrors
else
	cat "$DefaultTemplate"/theme.txt >> "$WorkDir"/theme.txt 2>$TmpErrors
	[ "$ShowActivity" = "true" ] && echo "Template file(s) missing. Using default."
fi

PickResources "logos" "PG_PGLogo" $PGLogo
PickResources "wallpapers" "PG_WallpaperImage" $WallpaperImage
PickResources "SETTING" "PG_HelpTextLength" $HelpTextLength

PickResources "icons" "PG_DistroIcons" $DistroIcons

PickResources "menu" "PG_MainMenuBitmaps" $MainMenuBitmaps
PickResources "menuitem" "PG_MainMenuItemBitmaps" $MainMenuItemBitmaps
PickResources "selected" "PG_MainMenuSelectedBitmaps" $MainMenuSelectedBitmaps
PickResources "menu" "PG_TopMenuBitmaps" $TopMenuBitmaps

PickResources "clock" "PG_ClockCenterImage" $ClockCenterImage
PickResources "clock" "PG_ClockTickImage" $ClockTickImage
PickResources "SETTING" "PG_ClockWidth" $ClockWidth
PickResources "SETTING" "PG_ClockHeight" $ClockHeight

PickResources "fonts" "PG_TerminalFont" $TerminalFont
PickResources "terminal" "PG_TerminalBitmaps" $TerminalBitmaps
PickResources "fonts" "PG_MainMenuItemFont" $MainMenuItemFont
PickResources "fonts" "PG_MainMenuSelectedItemFont" $MainMenuSelectedItemFont
PickResources "fonts" "PG_HelpFont" $HelpFont

PickResources "SETTING" "PG_MainMenuLeft" $MainMenuLeft
PickResources "SETTING" "PG_MainMenuTop" $MainMenuTop
PickResources "SETTING" "PG_MainMenuHeight" $MainMenuHeight
PickResources "SETTING" "PG_MainMenuWidth" $MainMenuWidth
PickResources "SETTING" "PG_MainMenuItemHeight" $MainMenuItemHeight
PickResources "SETTING" "PG_MainMenuItemSpacing" $MainMenuItemSpacing
PickResources "SETTING" "PG_MainMenuIconHeight" $MainMenuIconHeight
PickResources "SETTING" "PG_MainMenuIconWidth" $MainMenuIconWidth
PickResources "SETTING" "PG_MainMenuItemIconSpace" $MainMenuItemIconSpace
PickResources "SETTING" "PG_ClockTop" $ClockTop
PickResources "SETTING" "PG_ClockLeft" $ClockLeft
PickResources "SETTING" "PG_ClockNumTicks" $ClockNumTicks
PickResources "SETTING" "PG_ClockTicksDisappear" $ClockTicksDisappear

PickResources "SETTING" "PG_HelpTop" $HelpTop
PickResources "SETTING" "PG_HelpLeft" $HelpLeft
PickResources "SETTING" "PG_HelpWidth" $HelpWidth
PickResources "SETTING" "PG_HelpHeight" $HelpHeight
PickResources "SETTING" "PG_HelpAlign" $HelpAlign
PickResources "other" "PG_HelpBackground" $HelpBackground

PickResources "SETTING" "PG_LogoTop" $LogoTop
PickResources "SETTING" "PG_LogoLeft" $LogoLeft
PickResources "SETTING" "PG_LogoWidth" $LogoWidth
PickResources "SETTING" "PG_LogoHeight" $LogoHeight
PickResources "SETTING" "PG_TopMenuIconHeight" $TopMenuIconHeight
PickResources "SETTING" "PG_TopMenuIconWidth" $TopMenuIconWidth
PickResources "SETTING" "PG_TopMenuLeft" $TopMenuLeft
PickResources "SETTING" "PG_TopMenuTop" $TopMenuTop
PickResources "SETTING" "PG_TopMenuWidth" $TopMenuWidth
PickResources "SETTING" "PG_TopMenuHeight" $TopMenuHeight

PickResources "SETTING" "PG_DesktopColor" $DesktopColor
PickResources "SETTING" "PG_TopMenuColor" $TopMenuColor
PickResources "SETTING" "PG_MainMenuItemColor" $MainMenuItemColor
PickResources "SETTING" "PG_MainMenuSelectedItemColor" $MainMenuSelectedItemColor
PickResources "SETTING" "PG_HelpColor" $HelpColor


function PGSaveTheme {
if [ "$1" = "local" ]; then
	ThemeFolder="$LocalDataPath"/themes
elif [ "$1" = "system" ]; then
	ThemeFolder="$SystemDataPath"/themes
else
	return 1;
fi
NewGrubTheme="$PGTemplate"
if [ -d "$ThemeFolder"/"$NewGrubTheme" ]; then
	i=1
	until ! [ -d "$LocalDataPath"/themes/"$NewGrubTheme"-"$i" ]; do (( i++ )); done
	NewGrubTheme="$NewGrubTheme"-"$i"
fi
if [ ! $IAMROOT ] &&  [ "$1" = "system" ]; then
	sudo mkdir -p "$ThemeFolder"/"$NewGrubTheme"
	sudo cp -r "$WorkDir"/* "$ThemeFolder"/"$NewGrubTheme"/
else
	mkdir -p "$ThemeFolder"/"$NewGrubTheme"
	cp -r "$WorkDir"/* "$ThemeFolder"/"$NewGrubTheme"/
fi
if [ "$?" -ne 0 ]; then
	echo "Theme folder creation failed!..."
	return 1;
fi
#[ "$ShowActivity" = "true" ] &&
echo "
The new grub theme has been successfully created and saved at " "$ThemeFolder"/"$NewGrubTheme"

}

function PGSetActiveTheme {
	GrubThemesFolder=/boot/grub/themes
	NewActiveGrubTheme="${PGTemplate/"^default$"/"gtc-theme"}"
	if [ -d "$GrubThemesFolder"/"$NewActiveGrubTheme" ]; then
		i=1
		until ! [ -d "$GrubThemesFolder"/"$NewActiveGrubTheme"-"$i" ]; do (( i++ )); done
		NewActiveGrubTheme="$NewActiveGrubTheme"-"$i"
	fi
	ActiveGrubTheme=$(grep -e "^GRUB_THEME=" /etc/default/grub | cut -d= -f2)
	ActiveGrubTheme=${ActiveGrubTheme%"/theme.txt"}
	[ "$ShowActivity" = "true" ] && echo "New theme is "$NewActiveGrubTheme
	#echo "$GrubThemesFolder"/"$NewActiveGrubTheme"/theme.txt
## TODO confirm sed command to edit new theme setting for grub (before run grub)
	if [ ! $IAMROOT ]; then
		sudo mkdir -p "$GrubThemesFolder"/"$NewActiveGrubTheme"
		sudo cp -r  "$ThemeFolder"/"$NewGrubTheme"/* "$GrubThemesFolder"/"$NewActiveGrubTheme"/
		if ! [ "$ActiveGrubTheme" = "" ] && ! [ "$ActiveGrubTheme" = "$NewActiveGrubTheme" ]; then
			#sudo sed -i '/^GRUB_THEME=/ s/[[:print:]]*/GRUB_THEME=\"'$GrubThemesFolder/$NewActiveGrubTheme'/theme.txt\"/ ' /etc/default/grub
			sudo sed  -i -E '\%^\s{0,}GRUB_THEME=%c GRUB_THEME="'$GrubThemesFolder/$NewActiveGrubTheme'/theme.txt"' /etc/default/grub
		else
			[ "$ShowActivity" = "true" ] && echo "$GrubThemesFolder"/"$NewActiveGrubTheme"/theme.txt
			sudo echo GRUB_THEME="$GrubThemesFolder"/"$NewActiveGrubTheme"/theme.txt >>  /etc/default/grub
		fi
		grep "GRUB_THEME=" /etc/default/grub
		sudo grub-mkconfig -o /boot/grub/grub.cfg
		[ $HorizontalGrub = "true" ] && sudo horizontal-grub
	else
		mkdir -p "$GrubThemesFolder"/"$NewActiveGrubTheme"
		cp -r  "$ThemeFolder"/"$NewGrubTheme"/* "$GrubThemesFolder"/"$NewActiveGrubTheme"/
		if ! [ "$ActiveGrubTheme" = "" ] && ! [ "$ActiveGrubTheme" = "$NewActiveGrubTheme" ]; then
			#sudo sed -i '/^GRUB_THEME=/ s/[[:print:]]*/GRUB_THEME=\"'$GrubThemesFolder/$NewActiveGrubTheme'/theme.txt\"/ ' /etc/default/grub
			sed  -i -E '\%^\s{0,}GRUB_THEME=%c GRUB_THEME="'$GrubThemesFolder/$NewActiveGrubTheme'/theme.txt"' /etc/default/grub
		else
			[ "$ShowActivity" = "true" ] && echo "$GrubThemesFolder"/"$NewActiveGrubTheme"/theme.txt
			echo GRUB_THEME="$GrubThemesFolder"/"$NewActiveGrubTheme"/theme.txt >>  /etc/default/grub
		fi
		grep "GRUB_THEME=" /etc/default/grub
		grub-mkconfig -o /boot/grub/grub.cfg
		[ $HorizontalGrub = "true" ] && horizontal-grub
	fi
	ActiveGrubTheme=$(grep -e "^GRUB_THEME=" /etc/default/grub | cut -d= -f2)
	if ! [ $ActiveGrubTheme = \""$GrubThemesFolder"/"$NewActiveGrubTheme"/theme.txt\" ]; then
		echo "Theme activation failed!..."
		echo "Active theme is " $ActiveGrubTheme
		return 1;
	fi
	echo "New theme "$NewActiveGrubTheme" is saved and set active"
	#echo "\nThe new grub theme has been succesfully activated and saved at " "$GrubThemesFolder"/"$ActiveGrubTheme"
}


#  SaveLocal, SaveSystem, SetActiveTheme

case "${AutoActions-"SaveLocal"}" in
	SaveLocal) PGSaveTheme "local"
	;;
	SaveSystem) PGSaveTheme "system"
	;;
	SetActiveTheme) PGSaveTheme "system"
		[ "$?" -ne 0 ] && ( echo "Failed to save theme at system folder" \c ; exit; )
		[ $HorizontalGrub = "true" ] && [ ! $(which horizontal-grub) ] && echo "horizontal-grub was not found. Install it and set grub theme manually." \c
		PGSetActiveTheme
	;;
	*) echo "No actions defined"
	;;
	esac
 [ $? -ne 0 ] &&  echo "Error saving theme. Error Number " "$?"

[ -s  $TmpErrors ] && echo "There were errors encountered. You may send them to the developer if you think there is a bug.
   Error log file:  $TmpErrors"
exit;
