#!/usr/bin/env bash
#####################################################################
## ===================== Disclaimer ============================== ##
## This script-program is a proof-of-concept project and           ##
## a self training playground on Bash scripting.                   ##
## It is free for copy and use, while I am not responsible for any ##
## damage on your software or hardware. Use at your own risk!      ##
## It would be kind if you report any possible bugs, or ideas for  ##
## smart improvement of current code logic and possible new        ##
## features that are relevant.                                     ##
## =============================================================== ##

#####################################################################
##                    grub-theme-creator                           ##
##                     alias PrettyGrug                            ##
## This script will create a grub theme based on provided settings ##
## compatible with horizontal-grub script, to conform a theme      ##
## with fake-horizontal style.                                     ##
## It can be customized, so it can create usual grub themes.       ##
## It is supposed to be a base tool, which might be used from      ##
## theme developers to create even more artistic themes.           ##
## =============================================================== ##
#####           petsam's "Adventures in Bash"                   #####
#####################################################################


# Check if run as root or sudo
if (( $(id -u) == 0 )); then
	IAMROOT="true"
	echo "The script is run as root"
fi
#[ $IAMROOT ] && echo "I am Root" || echo "I am NOT Root"
RealUser=$(whoami)
#exit;

SystemDataPath=/usr/share/prettygrub
LocalDataPath=${XDG_DATA_HOME:-$HOME/.local/share}/prettygrub

# Help message
PrettygrubHelp=$0" will create a grub theme based on provided settings,
    compatible with horizontal-grub script, to conform a theme with fake-horizontal style.
    Usage:
     -t | --template  [TEMPLATE]
                     The template folder name, containing configuration files and a \"resources\" folder with custom images
                     If the parameter is not used, the default template will be used
     -h | --help
                     This help information message
     -a|--aspectratio [ASPECTRATIO] {optional}
                     [ASPECTRATIO] in the form of NUMBER_NUMBER. If the parameter is used, the value is required.
                     This might be helpful in cases when grub resolution is not the same as the real monitor resolution
     -r|--resolution [RESOLUTION] {optional}
                     [RESOLUTION] in the form of NUMBERxNUMBER. If the parameter is used, the value is required.
                     This might be helpful in cases when grub resolution is not the same as the real monitor resolution
     -p|--prettygrub
                     If you use horizontal-grub type theme, use this parameter to run horizontal-grub when setting as active theme
     -x|--scripted [ACTION]
                     Used to automate theming or horizontal-grub invocation in scripts. Available options are:
                     SaveLocal (saves produced theme to local home folder) SaveSystem (saves produced theme to system folder) [requires admin privileges], SetActiveTheme (as SaveSystem, then copies the theme to /boot/grub/themes, changes /etc/default/grub GRUB_THEME value, runs update-grub and if -p is provided, runs horizontal-grub) [requires admin privileges]
				"


PrettygrubHeading="
#### Automatically created grub theme by grub-theme-creator ####
# PrettyGrub project by @petsam
# Auto-generate proper resources and settings per custom resolution
"

function FileExists {
if [ -r $1 ]; then
#	echo $1 " was found."
	return 0;
elif [ -d $1 ] &&  [ "$2" = "icons" ] ; then
#	echo $1 " was found."
	return 0;
else
	echo $1 " was not found."
	return 128;
fi
}

# Create work directory
function CreateWorkDir {
	DateSuffix="pg-"$(date +%s)
	if [ ! -z "$TMPDIR" ];then
		echo "TMPDIR =" $TMPDIR
		WorkDir="$TMPDIR"/prettygrub-"$DateSuffix"
		echo $WorkDir
		exit;
	elif [ -d /tmp ];then
		WorkDir=/tmp/prettygrub-"$DateSuffix"
	else
		WorkDir=$HOME/.local/tmp/prettygrub-"$DateSuffix"
	fi
	mkdir -p "$WorkDir"
	#cd $WorkDir
	echo "Created working directory :" "$WorkDir"

}

function BatchCopy {
		BatchFiles=""
		CurrentResourceLeft=${1%\**}
		CurrentResourceRight=${1#*\*}
		BatchFiles=($(ls "$2"${1/*/\*} 2>/dev/null))
		if [ -z "${#BatchFiles[@]}" ]; then
			return 0;
		fi
		fcopied=0
		for bFile in ${BatchFiles[@]}
			do
				bFileName=${bFile##*/}
				FileLeft=${bFileName%_*}"_"
				FileRight="."${bFileName#*\.}
				if [ $FileLeft = "$CurrentResourceLeft" ] && [ $FileRight = "$CurrentResourceRight" ]; then
					cp "$2""$bFileName" "$WorkDir"/
					if [ "$?" -eq 0 ]; then (( fcopied++ )); fi
					echo "Copying " "$2""$bFileName"
				fi
			done
		return $fcopied;
}

# TransformImage params are the target width and height of the image
function TransformImage {
	ImageWidth=$1
	ImageHeight=${2/"^none$"/""}
	Image=$3
	echo "Converting " $Image to $ImageWidth x $ImageHeight to $WorkDir
	if [ $ImageWidth = "" ] ; then
		echo "Target image width was not provided. Aborting conversion.."
		return 2 ;
	else
		convert ${Image}  -background None  -scale ${ImageWidth}${ImageHeight:+"x$ImageHeight"} "$WorkDir"/${Image##*\/} 2>/dev/null
	fi
}

function PickResources {
ResourceType=$1
shift
SettingName=$1
shift
ResourceSetting=$*
CurrentResource=""
if [ "$ResourceType" != "SETTING" ] && [ "$ResourceSetting" != "" ]; then
	if [ "$ResourceType" = "fonts" ]; then
		CurrentSetting=$(echo $ResourceSetting | cut -d, -f2,3,4 | tr -d \")
		CurrentResource=$(echo $ResourceSetting | cut -d, -f1 | tr -d \")
	else
		CurrentSetting=$ResourceSetting
		CurrentResource=$ResourceSetting
	fi
	if ! [ ${CurrentResource#*\*} = $CurrentResource ]; then
		echo Copying "$CurrentResource" from "$Resources"/
		BatchCopy "$CurrentResource" "$Resources"/
		BCResult=$?
#		echo $BCResult
		if [ $BCResult = 0 ]; then
			echo "Using default resource" "$DefaultResources"/${ResourceType:+"$ResourceType"/}
			BatchCopy $CurrentResource "$DefaultResources"/${ResourceType:+"$ResourceType"/}
			if [ $? = 0 ]; then
				echo "Could not find Default Resource. Is something wrong?..."
			fi
		fi
	else
		if [ -d "$Resources"/$CurrentResource ] || [ -r "$Resources"/$CurrentResource ]; then
			echo "Found " "$Resources"/$CurrentResource
			CurrentResource="$Resources"/$CurrentResource
		elif [ -d "$DefaultResources"/${ResourceType:+"$ResourceType"/}$CurrentResource ] || [ -r "$DefaultResources"/${ResourceType:+"$ResourceType"/}$CurrentResource ]; then
			echo "Using default" "$DefaultResources"/${ResourceType:+"$ResourceType"/}$CurrentResource
			CurrentResource="$DefaultResources"/${ResourceType:+"$ResourceType"/}$CurrentResource
		else
			echo "Could not find " $CurrentResource
			return 0;
		fi

	fi
	if [ "$ResourceType" = "icons" ]; then
		mkdir "$WorkDir"/icons
		if [ $UseTopMenu = "true" ]; then
			echo "Converting and copying icons from " $CurrentResource " to " "$WorkDir"/icons
			for DistroIcon in $(ls $CurrentResource/*); do
				convert "$DistroIcon" -resize "$TopMenuIconWidth" -background None -gravity South -extent ${TopMenuIconWidth}x${TopMenuIconHeight} "$WorkDir"/icons/${DistroIcon##*\/} 2>/dev/null
			done
		else
			echo "Copying icons from " $CurrentResource " to " "$WorkDir"/icons
			cp -r $CurrentResource/* "$WorkDir"/icons/ 2>/dev/null
		fi
	elif [ "$ResourceType" = "clock" ] || [ "$ResourceType" = "logos" ] || [ "$ResourceType" = "wallpapers" ]; then
		case $SettingName in
		PG_WallpaperImage)
			if [ ! "$GrubResolution" = "" ]; then
				TransformImage ${GrubResolution%x*} ${GrubResolution#*x} $CurrentResource
			fi
		;;
		PG_PGLogo)TransformImage $LogoWidth $LogoHeight $CurrentResource
		;;
		PG_ClockCenterImage)TransformImage $ClockWidth $ClockHeight $CurrentResource
		;;
		PG_ClockTickImage)TransformImage $(($ClockWidth/10)) $(($ClockWidth/10)) $CurrentResource
		;;
		*)echo "$ResourceType $CurrentResource not found"
		;;
		esac
	else
		cp -r $CurrentResource "$WorkDir"/ 2>/dev/null
	fi
else
	CurrentSetting=$ResourceSetting
fi

if [ "$CurrentSetting" = "" ]; then
	sed -i '/'"$SettingName"'/d' "$WorkDir"/theme.txt
else
	#echo "$SettingName" set to "$CurrentSetting"
	sed -i 's/'"$SettingName"'/'"$CurrentSetting"'/g' "$WorkDir"/theme.txt
fi
}

# Check for given command line parameters

if [ $# -eq 0 ]; then
	PGTemplate="default"
else
	while [ "${1+defined}" ]; do
	#  shift
		case "$1" in
			-h|--help) echo -e "$PrettygrubHelp"
				exit;
				;;
			-t|--template) shift
				if [ "${1+defined}" ] && [ ! "${1#-}" = "-" ]; then
					PGTemplate="$1"
					shift
				else
					PGTemplate="default"
				fi
				;;
			-a|--aspectratio) shift
				if [ "$1" = "${1%_*}_${1#*_}" ]; then
					CustomAspectRatio="$1"
					shift
				else
					echo "Invalid argument for Aspect Ratio"
					echo $1 , "$asp", ${asp%*"_"}_ ${asp#_*}, ${1%*"_"}_ ${1#_*}
					echo -e "$PrettygrubHelp"
					exit;
				fi
				;;
			-r|--resolution) shift
				if [ "$1" = "${1%x*}x${1#*x}" ]; then
					CustomGrubResolution="$1"
					shift
				else
					echo "Invalid argument for Grub Resolution"
					echo -e "$PrettygrubHelp"
					exit;
				fi
				;;
			-p|--prettygrub) CustomHorizontalGrub="true"
				shift
				;;
			-x|--scripted) shift
				if [ "${1+defined}" ] && [ ! "${1#-}" = "-" ]; then
					CustomAutoActions="$1"
					shift
				fi
				;;
			*)	echo "Unknown argument"
				echo "Exiting..."
				exit;;
		esac
	done
fi

# Configuration paths
DefaultTemplate="default"
[ -d "$LocalDataPath"/templates/"$DefaultTemplate" ] && DefaultTemplate="$LocalDataPath"/templates/"$DefaultTemplate" || DefaultTemplate="$SystemDataPath"/templates/"$DefaultTemplate"
echo "Default Template" "$DefaultTemplate"
if  [ -d "$LocalDataPath"/templates/"$PGTemplate" ] ; then
	Template="$LocalDataPath"/templates/"$PGTemplate"
elif [ -d "$SystemDataPath"/templates/"$PGTemplate" ]; then
	Template="$SystemDataPath"/templates/"$PGTemplate"
else
	echo "Template "$PGTemplate" is missing. Exiting..."
	exit;
fi
#echo "Template" "$Template"
DefaultResources="$DefaultTemplate"/resources
Resources="$Template"/resources
echo "Transforming " $Template

CreateWorkDir
echo -e "$PrettygrubHeading" > "$WorkDir"/theme.txt
if  FileExists "$Template"/theme.txt ; then
	cat "$Template"/theme.txt >> "$WorkDir"/theme.txt
else
	cat "$DefaultTemplate"/theme.txt >> "$WorkDir"/theme.txt
	echo "Template file(s) missing. Using default."
fi

if [ -r "$DefaultTemplate"/default.conf ]; then . "$DefaultTemplate"/default.conf; fi
if [ -r "$Template"/default.conf ]; then . "$Template"/default.conf; fi
if [ ! $CustomAspectRatio = "" ]; then AspectRatio=$CustomAspectRatio; fi
if [ -r "$DefaultTemplate"/"$AspectRatio".conf ]; then . "$DefaultTemplate"/"$AspectRatio".conf; fi
if [ ! $CustomGrubResolution = "" ]; then GrubResolution=$CustomGrubResolution; fi
if [ -r "$DefaultTemplate"/"$GrubResolution".conf ]; then . "$DefaultTemplate"/"$GrubResolution".conf ; fi
if [ -r "$Template"/default.conf ]; then . "$Template"/default.conf; fi
if [ -r "$Template"/"$AspectRatio".conf ]; then . "$Template"/"$AspectRatio".conf; fi
if [ -r "$Template"/"$GrubResolution".conf ]; then . "$Template"/"$GrubResolution".conf ; fi

# Apply command-line overrides
HorizontalGrub=${CustomHorizontalGrub-$HorizontalGrub}
AutoActions=${CustomAutoActions-$AutoActions}
# Write settings and copy resources to theme temp folder

PickResources "logos" "PG_PGLogo" $PGLogo
PickResources "wallpapers" "PG_WallpaperImage" $WallpaperImage
PickResources "SETTING" "PG_HelpTextLength" $HelpTextLength

PickResources "icons" "PG_DistroIcons" $DistroIcons

PickResources "menu" "PG_MainMenuBitmaps" $MainMenuBitmaps
PickResources "menuitem" "PG_MainMenuItemBitmaps" $MainMenuItemBitmaps
PickResources "selected" "PG_MainMenuSelectedBitmaps" $MainMenuSelectedBitmaps
PickResources "menu" "PG_TopMenuBitmaps" $TopMenuBitmaps

PickResources "clock" "PG_ClockCenterImage" $ClockCenterImage
PickResources "clock" "PG_ClockTickImage" $ClockTickImage
PickResources "SETTING" "PG_ClockWidth" $ClockWidth
PickResources "SETTING" "PG_ClockHeight" $ClockHeight

PickResources "fonts" "PG_TerminalFont" $TerminalFont
PickResources "terminal" "PG_TerminalBitmaps" $TerminalBitmaps
PickResources "fonts" "PG_MainMenuItemFont" $MainMenuItemFont
PickResources "fonts" "PG_MainMenuSelectedItemFont" $MainMenuSelectedItemFont
PickResources "fonts" "PG_HelpFont" $HelpFont

PickResources "SETTING" "PG_MainMenuLeft" $MainMenuLeft
PickResources "SETTING" "PG_MainMenuTop" $MainMenuTop
PickResources "SETTING" "PG_MainMenuHeight" $MainMenuHeight
PickResources "SETTING" "PG_MainMenuWidth" $MainMenuWidth
PickResources "SETTING" "PG_MainMenuItemHeight" $MainMenuItemHeight
PickResources "SETTING" "PG_MainMenuItemSpacing" $MainMenuItemSpacing
PickResources "SETTING" "PG_MainMenuIconHeight" $MainMenuIconHeight
PickResources "SETTING" "PG_MainMenuIconWidth" $MainMenuIconWidth
PickResources "SETTING" "PG_MainMenuItemIconSpace" $MainMenuItemIconSpace
PickResources "SETTING" "PG_ClockTop" $ClockTop
PickResources "SETTING" "PG_ClockLeft" $ClockLeft
PickResources "SETTING" "PG_ClockNumTicks" $ClockNumTicks
PickResources "SETTING" "PG_ClockTicksDisappear" $ClockTicksDisappear

PickResources "SETTING" "PG_HelpTop" $HelpTop
PickResources "SETTING" "PG_HelpLeft" $HelpLeft
PickResources "SETTING" "PG_HelpWidth" $HelpWidth
PickResources "SETTING" "PG_HelpHeight" $HelpHeight
PickResources "SETTING" "PG_HelpAlign" $HelpAlign
PickResources "other" "PG_HelpBackground" $HelpBackground

PickResources "SETTING" "PG_LogoTop" $LogoTop
PickResources "SETTING" "PG_LogoLeft" $LogoLeft
PickResources "SETTING" "PG_LogoWidth" $LogoWidth
PickResources "SETTING" "PG_LogoHeight" $LogoHeight
PickResources "SETTING" "PG_TopMenuIconHeight" $TopMenuIconHeight
PickResources "SETTING" "PG_TopMenuIconWidth" $TopMenuIconWidth
PickResources "SETTING" "PG_TopMenuLeft" $TopMenuLeft
PickResources "SETTING" "PG_TopMenuTop" $TopMenuTop
PickResources "SETTING" "PG_TopMenuWidth" $TopMenuWidth
PickResources "SETTING" "PG_TopMenuHeight" $TopMenuHeight

PickResources "SETTING" "PG_DesktopColor" $DesktopColor
PickResources "SETTING" "PG_TopMenuColor" $TopMenuColor
PickResources "SETTING" "PG_MainMenuItemColor" $MainMenuItemColor
PickResources "SETTING" "PG_MainMenuSelectedItemColor" $MainMenuSelectedItemColor
PickResources "SETTING" "PG_HelpColor" $HelpColor


function PGSaveTheme {
if [ "$1" = "local" ]; then
	ThemeFolder="$LocalDataPath"/themes
elif [ "$1" = "system" ]; then
	ThemeFolder="$SystemDataPath"/themes
else
	return 1;
fi
NewGrubTheme="$PGTemplate"
if [ -d "$ThemeFolder"/"$NewGrubTheme" ]; then
	i=1
	until ! [ -d "$LocalDataPath"/themes/"$NewGrubTheme"-"$i" ]; do (( i++ )); done
	NewGrubTheme="$NewGrubTheme"-"$i"
fi
if [ ! $IAMROOT ] &&  [ "$1" = "system" ]; then
	sudo mkdir -p "$ThemeFolder"/"$NewGrubTheme"
	sudo cp -r "$WorkDir"/* "$ThemeFolder"/"$NewGrubTheme"/
else
	mkdir -p "$ThemeFolder"/"$NewGrubTheme"
	cp -r "$WorkDir"/* "$ThemeFolder"/"$NewGrubTheme"/
fi
if [ "$?" -ne 0 ]; then
	echo "Theme folder creation failed!..."
	return 1;
fi
echo "
The new grub theme has been succesfully created and saved at " "$ThemeFolder"/"$NewGrubTheme"
}

function PGSetActiveTheme {
	GrubThemesFolder=/boot/grub/themes
	NewActiveGrubTheme="${PGTemplate/"^default$"/"gtc-theme"}"
	if [ -d "$GrubThemesFolder"/"$NewActiveGrubTheme" ]; then
		i=1
		until ! [ -d "$GrubThemesFolder"/"$NewActiveGrubTheme"-"$i" ]; do (( i++ )); done
		NewActiveGrubTheme="$NewActiveGrubTheme"-"$i"
	fi
	ActiveGrubTheme=$(grep -e "^GRUB_THEME=" /etc/default/grub | cut -d= -f2)
	ActiveGrubTheme=${ActiveGrubTheme%"/theme.txt"}
	echo "New theme is "$NewActiveGrubTheme
	#echo "$GrubThemesFolder"/"$NewActiveGrubTheme"/theme.txt
## TODO confirm sed command to edit new theme setting for grub (before run grub)
	if [ ! $IAMROOT ]; then
		sudo mkdir -p "$GrubThemesFolder"/"$NewActiveGrubTheme"
		sudo cp -r  "$ThemeFolder"/"$NewGrubTheme"/* "$GrubThemesFolder"/"$NewActiveGrubTheme"/
		if ! [ "$ActiveGrubTheme" = "" ] && ! [ "$ActiveGrubTheme" = "$NewActiveGrubTheme" ]; then
			#sudo sed -i '/^GRUB_THEME=/ s/[[:print:]]*/GRUB_THEME=\"'$GrubThemesFolder/$NewActiveGrubTheme'/theme.txt\"/ ' /etc/default/grub
			sudo sed  -i -E '\%^\s{0,}GRUB_THEME=%c GRUB_THEME="'$GrubThemesFolder/$NewActiveGrubTheme'/theme.txt"' /etc/default/grub
		else
			echo "$GrubThemesFolder"/"$NewActiveGrubTheme"/theme.txt
			sudo echo GRUB_THEME="$GrubThemesFolder"/"$NewActiveGrubTheme"/theme.txt >>  /etc/default/grub
		fi
		grep "GRUB_THEME=" /etc/default/grub
		#exit;
		sudo grub-mkconfig -o /boot/grub/grub.cfg
		[ $HorizontalGrub = "true" ] && sudo horizontal-grub
	else
		mkdir -p "$GrubThemesFolder"/"$NewActiveGrubTheme"
		cp -r  "$ThemeFolder"/"$NewGrubTheme"/* "$GrubThemesFolder"/"$NewActiveGrubTheme"/
		if ! [ "$ActiveGrubTheme" = "" ] && ! [ "$ActiveGrubTheme" = "$NewActiveGrubTheme" ]; then
			#sudo sed -i '/^GRUB_THEME=/ s/[[:print:]]*/GRUB_THEME=\"'$GrubThemesFolder/$NewActiveGrubTheme'/theme.txt\"/ ' /etc/default/grub
			sed  -i -E '\%^\s{0,}GRUB_THEME=%c GRUB_THEME="'$GrubThemesFolder/$NewActiveGrubTheme'/theme.txt"' /etc/default/grub
		else
			echo "$GrubThemesFolder"/"$NewActiveGrubTheme"/theme.txt
			echo GRUB_THEME="$GrubThemesFolder"/"$NewActiveGrubTheme"/theme.txt >>  /etc/default/grub
		fi
		grep "GRUB_THEME=" /etc/default/grub
		#exit;
		grub-mkconfig -o /boot/grub/grub.cfg
		[ $HorizontalGrub = "true" ] && horizontal-grub
	fi
	ActiveGrubTheme=$(grep -e "^GRUB_THEME=" /etc/default/grub | cut -d= -f2)
	if ! [ $ActiveGrubTheme = \""$GrubThemesFolder"/"$NewActiveGrubTheme"/theme.txt\" ]; then
		echo "Theme activation failed!..."
		echo "Active theme is " $ActiveGrubTheme
		return 1;
	fi
	echo "New theme "$NewActiveGrubTheme" is saved and set active"
	echo "
	The new grub theme has been succesfully activated and saved at " "$GrubThemesFolder"/"$ActiveGrubTheme"
}


#  SaveLocal, SaveSystem, SetActiveTheme

case "${AutoActions-"SaveLocal"}" in
	SaveLocal) PGSaveTheme "local"
	;;
	SaveSystem) PGSaveTheme "system"
	;;
	SetActiveTheme) PGSaveTheme "system"
		[ "$?" -ne 0 ] && ( echo "Failed to save theme at system folder" \c ; exit; )
		[ $HorizontalGrub = "true" ] && [ ! $(which horizontal-grub) ] && echo "horizontal-grub was not found. Install it and set grub theme manually." \c
		PGSetActiveTheme
	;;
	*) echo "No actions defined"
	;;
	esac
 [ $? -ne 0 ] &&  echo "Error saving theme. Error Number " "$?"
exit;
