#!/usr/bin/env bash
#####################################################################
## ===================== Disclaimer ============================== ##
## This script-program is a proof-of-concept project and           ##
## a self training playground on Bash scripting.                   ##
## It is free for copy and use, while I am not responsible for any ##
## damage on your software or hardware. Use at your own risk!      ##
## It would be kind if you report any possible bugs, or ideas for  ##
## smart improvement of current code logic and possible new        ##
## features that are relevant.                                     ##
## =============================================================== ##

#####################################################################
##                      prettygrub                                 ##
## This script will create a grub theme based on provided settings ##
## compatible with horizontal-grub script, to conform a theme      ##
## with fake-horizontal style.                                     ##
## It might be customized, so it can create usual grub themes.     ##
## It is supposed to be a base tool, which might be used from      ##
## theme developers to create even more artistic themes.           ##
## =============================================================== ##
#####           petsam's "Adventures in Bash"                   #####
#####################################################################


# Check if run as root or sudo
if (( $(id -u) == 0 )); then
    echo "The script is run as root"
fi

SystemDataPath=/usr/share/prettygrub
LocalDataPath=${XDG_DATA_HOME:-$HOME/.local/share}/prettygrub

# Help message
PrettygrubHelp="PrettyGrub will create a grub theme based on provided settings,
    compatible with horizontal-grub script, to conform a theme with fake-horizontal style.
    Usage:
    prewttygrub (-t | --template) [TEMPLATE] If TEMPLATE is ommited, default template will be used
    prewttygrub (-h | --help) This help information message"


PrettygrubHeading="
#### Automatically created grub theme by PrettyGrub ####
# PrettyGrub GRUB2 gfxmenu by @petsam
# Designed for many resolutions
"

function FileExists {
if [ -r $1 ]; then
#	echo $1 " was found."
	return 0;
elif [ -d $1 ] &&  [ "$2" = "icons" ] ; then
#	echo $1 " was found."
	return 0;
else
	echo $1 " was not found."
	return 128;
fi
}

# Create work directory
function CreateWorkDir {
	DateSuffix="pg-"$(date +%s)
	if [ ! -z "$TMPDIR" ];then
		echo "TMPDIR =" $TMPDIR
		WorkDir="$TMPDIR"/prettygrub-"$DateSuffix"
		echo $WorkDir
		exit;
	elif [ -d /tmp ];then
		WorkDir=/tmp/prettygrub-"$DateSuffix"
	else
		WorkDir=$HOME/.local/tmp/prettygrub-"$DateSuffix"
	fi
	mkdir -p "$WorkDir"
	#cd $WorkDir
	echo "Created working directory :" "$WorkDir"

}

function PickResources {
#if $2; then ${2:+"$2"/}
ResourceType=$1
shift
SettingName=$1
shift
ResourceSetting=$*
CurrentResource=""
if [ "$ResourceType" != "SETTING" ] && [ "$ResourceSetting" != "" ]; then
	if [ "$ResourceType" = "fonts" ]; then
		CurrentSetting=$(echo $ResourceSetting | cut -d, -f2,3,4 | tr -d \")
		CurrentResource=$(echo $ResourceSetting | cut -d, -f1 | tr -d \")
	else
		CurrentSetting=$ResourceSetting
		CurrentResource=$ResourceSetting
	fi
	if (echo $CurrentResource | grep -o \* 2>/dev/null) ; then
		if $(ls "$Resources"/${CurrentResource%'*'*}*${CurrentResource#*'*'}  2>/dev/null) ; then
			CurrentResource="$Resources"/${CurrentResource%'*'*}*${CurrentResource#*'*'}
		#elif $(ls "$DefaultResources"/${ResourceType:+"$ResourceType"/}"${CurrentResource%'*'*}"*"${CurrentResource#*'*'}"  2>/dev/null) ; then
		#	CurrentResource="$DefaultResources"/${ResourceType:+"$ResourceType"/}${CurrentResource%'*'*}*${CurrentResource#*'*'}
		else
			#echo "Custom resources"
			#ls "$Resources"/${CurrentResource%'*'*}*${CurrentResource#*'*'}
			#echo "Default resources folder"
			#ls "$DefaultResources"/${ResourceType:+"$ResourceType"/}
			#echo "Default resources"
			# ls "$DefaultResources"/${ResourceType:+"$ResourceType"/}"${CurrentResource%'*'*}"*"${CurrentResource#*'*'}"
			echo "Could not find " $CurrentResource
			CurrentResource="$DefaultResources"/${ResourceType:+"$ResourceType"/}${CurrentResource%'*'*}*${CurrentResource#*'*'}
			#return 0;
		fi
	else
		if [ -d "$Resources"/$CurrentResource ] || [ -r "$Resources"/$CurrentResource ]; then
			echo "Found " "$Resources"/$CurrentResource
			CurrentResource="$Resources"/$CurrentResource
		elif [ -d "$DefaultResources"/${ResourceType:+"$ResourceType"/}$CurrentResource ] || [ -r "$DefaultResources"/${ResourceType:+"$ResourceType"/}$CurrentResource ]; then
			echo "Using default" "$DefaultResources"/${ResourceType:+"$ResourceType"/}$CurrentResource
			CurrentResource="$DefaultResources"/${ResourceType:+"$ResourceType"/}$CurrentResource
#		elif [ -r "$Resources"/$CurrentResource ]; then
#			echo "Found " "$Resources"/$CurrentResource
#			CurrentResource=$CurrentResource
#		elif [ -r "$DefaultResources"/${ResourceType:+"$ResourceType"/}$CurrentResource ]; then
#			echo "Using default" "$DefaultResources"/${ResourceType:+"$ResourceType"/}$CurrentResource
#			CurrentResource="$DefaultResources"/${ResourceType:+"$ResourceType"/}$CurrentResource
		else
			echo "Could not find " $CurrentResource
			return 0;
		fi
	fi
	if [ "$ResourceType" = "icons" ]; then
		mkdir "$WorkDir"/icons
		for DistroIcon in $(ls $CurrentResource/*); do
			# echo "Icon " "$DistroIcon"
			convert "$DistroIcon" -resize "$TopMenuIconWidth" -background None -gravity South -extent ${TopMenuIconWidth}x${TopMenuIconHeight} "$WorkDir"/icons/${DistroIcon##*\/} 2>/dev/null
		done
	else
		cp -r $CurrentResource "$WorkDir"/ 2>/dev/null
	fi

else
	CurrentSetting=$ResourceSetting
fi

## TODO: check if Parameter is empty and set the default DONE
if [ "$CurrentSetting" = "" ]; then
	sed -i '/'"$SettingName"'/d' "$WorkDir"/theme.txt
else
	sed -i 's/'"$SettingName"'/'"$CurrentSetting"'/g' "$WorkDir"/theme.txt
fi
# grep -F "$CurrentSetting" "$WorkDir"/theme.txt
}

# Check for given command line parameters

while [ "${1+defined}" ]; do
#  echo "$1"
#  shift
	case "$1" in
#if [ $# -eq 0 ]; then
#	PGTemplate="default"
		-h|--help) echo -e "$PrettygrubHelp"
			exit;
			;;
		-t|--template) shift
			[ "${1+defined}" ] && [ ! "${1#-}" = "-" ] && PGTemplate="${1}" || PGTemplate="default"
			shift
			;;
		-a|--aspectratio) shift
			[ "$1" = "[0-9]{1,2}\_[0-9]{1,2}" ] && echo "$1" ; CustomAspectRatio="$1" ; shift; continue;
			echo "Invalid argument for Aspect Ratio"
			echo -e "$PrettygrubHelp"
			exit;
			;;
		-r|--resolution) shift
			[ "$1" = "[0-9]{3,4}x[0-9]{3,4}" ] && CustomGrubResolution="$1" ; shift; continue
			echo "Invalid argument for Grub Resolution"
			echo -e "$PrettygrubHelp"
			exit;
			;;
		-g|--horizontal-grub) shift
			[ "${1+defined}" ] && [ ! "${1#-}" = "-" ] &&  HorizontalGrub="$1"
			shift ; continue;
			echo "Invalid argument for Horizontal Grub"
			shift
			;;
		*)	echo "Unknown argument"
			echo "Exiting..."
			exit;;
	esac

done

# Configuration paths
DefaultTemplate="$SystemDataPath"/templates/default
if  [ -d "$LocalDataPath"/templates/"$PGTemplate" ] ; then
	Template="$LocalDataPath"/templates/"$PGTemplate"
elif [ -d "$SystemDataPath"/templates/"$PGTemplate" ]; then
	Template="$SystemDataPath"/templates/"$PGTemplate"
else
	echo "Template "$PGTemplate" is missing. Exiting..."
	exit;
fi
# Template="$LocalDataPath"/templates/"$PGTemplate"
DefaultResources="$SystemDataPath"/resources
Resources="$Template"/resources

echo "Transforming " $Template
# "with" $TemplateTxtFile



CreateWorkDir
echo  $PrettygrubHeading > "$WorkDir"/theme.txt
if  FileExists "$Template"/theme.txt ; then
	cat "$Template"/theme.txt >> "$WorkDir"/theme.txt
else
	cat "$DefaultTemplate"/theme.txt >> "$WorkDir"/theme.txt
	echo "Template file(s) missing. Using default."
fi

if [ -r "$DefaultTemplate"/default.conf ]; then . "$DefaultTemplate"/default.conf; fi
if [ -r "$Template"/default.conf ]; then . "$Template"/default.conf; fi
if [ ! $CustomAspectRatio = "" ]; then AspectRatio=$CustomAspectRatio; fi
if [ ! $CustomGrubResolution = "" ]; then GrubResolution=$CustomGrubResolution; fi
if [ -r "$DefaultTemplate"/"$AspectRatio".conf ]; then . "$DefaultTemplate"/"$AspectRatio".conf; fi
if [ -r "$DefaultTemplate"/"$GrubResolution".conf ]; then . "$DefaultTemplate"/"$GrubResolution".conf ; fi
if [ -r "$Template"/default.conf ]; then . "$Template"/default.conf; fi
if [ -r "$Template"/"$AspectRatio".conf ]; then . "$Template"/"$AspectRatio".conf; fi
if [ -r "$Template"/"$GrubResolution".conf ]; then . "$Template"/"$GrubResolution".conf ; fi



# Write settings and copy resources to theme temp folder

PickResources "wallpapers" "PG_WallpaperImage" $WallpaperImage
PickResources "fonts" "PG_TerminalFont" $TerminalFont
PickResources "terminal" "PG_TerminalBitmaps" $TerminalBitmaps
PickResources "fonts" "PG_MenuItemFont" $MenuItemFont
PickResources "fonts" "PG_SelectedItemFont" $SelectedItemFont
PickResources "menu" "PG_MenuBitmaps" $MenuBitmaps
PickResources "menuitem" "PG_ItemBitmaps" $ItemBitmaps
PickResources "selected" "PG_SelectedBitmaps" $SelectedBitmaps
PickResources "clock" "PG_ClockCenterImage" $ClockCenterImage
PickResources "clock" "PG_ClockTickImage" $ClockTickImage
PickResources "fonts" "PG_HelpFont" $HelpFont

PickResources "SETTING" "PG_DesktopColor" $DesktopColor
PickResources "SETTING" "PG_TopmenuColor" $TopmenuColor
PickResources "SETTING" "PG_MenuItemColor" $MenuItemColor
PickResources "SETTING" "PG_SelectedItemColor" $SelectedItemColor
PickResources "SETTING" "PG_HelpTextLength" $HelpTextLength
PickResources "SETTING" "PG_HelpColor" $HelpColor

PickResources "SETTING" "PG_TopMenuIconHeight" $TopMenuIconHeight
PickResources "SETTING" "PG_TopMenuIconWidth" $TopMenuIconWidth
PickResources "SETTING" "PG_ClockWidth" $ClockWidth
PickResources "SETTING" "PG_ClockHeight" $ClockHeight

PickResources "icons" "PG_DistroIcons" $DistroIcons
PickResources "logos" "PG_PGLogo" $PGLogo

if [ -d "$LocalDataPath"/themes/"$PGTemplate" ]; then
	i=1
	until ! [ -d "$LocalDataPath"/themes/"$PGTemplate"-"$i" ]; do (( i++ )); done
	PGTemplate="$PGTemplate"-"$i"
fi
mkdir -p "$LocalDataPath"/themes/"$PGTemplate"
cp -r "$WorkDir"/* "$LocalDataPath"/themes/"$PGTemplate"
if [ "$?" -eq 0 ]; then echo "
The new grub theme has been succesfully created and saved as " "$PGTemplate"
	[ "$HorizontalGrub" ] && echo "Horizontal-grub function not implemented, yet!"
fi

exit;
