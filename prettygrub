#!/usr/bin/env bash
#####################################################################
## ===================== Disclaimer ============================== ##
## This script-program is a proof-of-concept project and           ##
## a self training playground on Bash scripting.                   ##
## It is free for copy and use, while I am not responsible for any ##
## damage on your software or hardware. Use at your own risk!      ##
## It would be kind if you report any possible bugs, or ideas for  ##
## smart improvement of current code logic and possible new        ##
## features that are relevant.                                     ##
## =============================================================== ##

#####################################################################
##                    grub-theme-creator                           ##
##                     alias PrettyGrug                            ##
## This script will create a grub theme based on provided settings ##
## compatible with horizontal-grub script, to conform a theme      ##
## with fake-horizontal style.                                     ##
## It can be customized, so it can create usual grub themes.       ##
## It is supposed to be a base tool, which might be used from      ##
## theme developers to create even more artistic themes.           ##
## =============================================================== ##
#####           petsam's "Adventures in Bash"                   #####
#####################################################################


# Check if run as root or sudo
if (( $(id -u) == 0 )); then
	IAMROOT="true"
	echo "The script is run as root"
fi
#[ $IAMROOT ] && echo "I am Root" || echo "I am NOT Root"
RealUser=$(whoami)
#exit;

SystemDataPath=/usr/share/prettygrub
LocalDataPath=${XDG_DATA_HOME:-$HOME/.local/share}/prettygrub

# Help message
PrettygrubHelp="PrettyGrub will create a grub theme based on provided settings,
    compatible with horizontal-grub script, to conform a theme with fake-horizontal style.
    Usage:
    prettygrub (-t | --template) [TEMPLATE] If TEMPLATE is ommited, default template will be used
    prettygrub (-h | --help) This help information message"


PrettygrubHeading="
#### Automatically created grub theme by grub-theme-creator ####
# PrettyGrub GRUB2 theme by @petsam
# Auto-generate proper resources and settings per custom resolution
"

function FileExists {
if [ -r $1 ]; then
#	echo $1 " was found."
	return 0;
elif [ -d $1 ] &&  [ "$2" = "icons" ] ; then
#	echo $1 " was found."
	return 0;
else
	echo $1 " was not found."
	return 128;
fi
}

# Create work directory
function CreateWorkDir {
	DateSuffix="pg-"$(date +%s)
	if [ ! -z "$TMPDIR" ];then
		echo "TMPDIR =" $TMPDIR
		WorkDir="$TMPDIR"/prettygrub-"$DateSuffix"
		echo $WorkDir
		exit;
	elif [ -d /tmp ];then
		WorkDir=/tmp/prettygrub-"$DateSuffix"
	else
		WorkDir=$HOME/.local/tmp/prettygrub-"$DateSuffix"
	fi
	mkdir -p "$WorkDir"
	#cd $WorkDir
	echo "Created working directory :" "$WorkDir"

}

function PickResources {
#if $2; then ${2:+"$2"/}
ResourceType=$1
shift
SettingName=$1
shift
ResourceSetting=$*
CurrentResource=""
if [ "$ResourceType" != "SETTING" ] && [ "$ResourceSetting" != "" ]; then
	if [ "$ResourceType" = "fonts" ]; then
		CurrentSetting=$(echo $ResourceSetting | cut -d, -f2,3,4 | tr -d \")
		CurrentResource=$(echo $ResourceSetting | cut -d, -f1 | tr -d \")
	else
		CurrentSetting=$ResourceSetting
		CurrentResource=$ResourceSetting
	fi
	if (echo $CurrentResource | grep -o \* 2>/dev/null) ; then
		if $(ls "$Resources"/${CurrentResource%'*'*}*${CurrentResource#*'*'}  2>/dev/null) ; then
			CurrentResource="$Resources"/${CurrentResource%'*'*}*${CurrentResource#*'*'}
		else
			echo "Could not find " $CurrentResource
			CurrentResource="$DefaultResources"/${ResourceType:+"$ResourceType"/}${CurrentResource%'*'*}*${CurrentResource#*'*'}
			#return 0;
		fi
	else
		if [ -d "$Resources"/$CurrentResource ] || [ -r "$Resources"/$CurrentResource ]; then
			echo "Found " "$Resources"/$CurrentResource
			CurrentResource="$Resources"/$CurrentResource
		elif [ -d "$DefaultResources"/${ResourceType:+"$ResourceType"/}$CurrentResource ] || [ -r "$DefaultResources"/${ResourceType:+"$ResourceType"/}$CurrentResource ]; then
			echo "Using default" "$DefaultResources"/${ResourceType:+"$ResourceType"/}$CurrentResource
			CurrentResource="$DefaultResources"/${ResourceType:+"$ResourceType"/}$CurrentResource
		else
			echo "Could not find " $CurrentResource
			return 0;
		fi
	fi
	if [ "$ResourceType" = "icons" ]; then
		mkdir "$WorkDir"/icons
		if [ $HorizontalGrub = "true" ]; then
			for DistroIcon in $(ls $CurrentResource/*); do
				# echo "Icon " "$DistroIcon"
				convert "$DistroIcon" -resize "$TopMenuIconWidth" -background None -gravity South -extent ${TopMenuIconWidth}x${TopMenuIconHeight} "$WorkDir"/icons/${DistroIcon##*\/} 2>/dev/null
			done
		else
			cp -r $CurrentResource "$WorkDir"/icons 2>/dev/null
		fi
	else
		cp -r $CurrentResource "$WorkDir"/ 2>/dev/null
	fi

else
	CurrentSetting=$ResourceSetting
fi

if [ "$CurrentSetting" = "" ]; then
	sed -i '/'"$SettingName"'/d' "$WorkDir"/theme.txt
else
	sed -i 's/'"$SettingName"'/'"$CurrentSetting"'/g' "$WorkDir"/theme.txt
fi
# grep -F "$CurrentSetting" "$WorkDir"/theme.txt
}

# Check for given command line parameters

if [ $# -eq 0 ]; then
	PGTemplate="default"
else
	while [ "${1+defined}" ]; do
	#  echo "$1"
	#  shift
		case "$1" in
			-h|--help) echo -e "$PrettygrubHelp"
				exit;
				;;
			-t|--template) shift
				if [ "${1+defined}" ] && [ ! "${1#-}" = "-" ]; then
					PGTemplate="$1"
					shift
				else
					PGTemplate="default"
				fi
				;;
			-a|--aspectratio) shift
				if [ "$1" = "[0-9]{1,2}\_[0-9]{1,2}" ]; then
					echo "$1"
					CustomAspectRatio="$1"
					shift
				else
					echo "Invalid argument for Aspect Ratio"
					echo -e "$PrettygrubHelp"
					exit;
				fi
				;;
			-r|--resolution) shift
				if [ "$1" = "[0-9]{3,4}x[0-9]{3,4}" ]; then
					CustomGrubResolution="$1"
					shift
				else
					echo "Invalid argument for Grub Resolution"
					echo -e "$PrettygrubHelp"
					exit;
				fi
				;;
			-p|--prettygrub) CustomHorizontalGrub="true"
				shift
				;;
			-x|--scripted) shift
				if [ "${1+defined}" ] && [ ! "${1#-}" = "-" ]; then
					CustomAutoActions="$1"
					shift
				fi
				;;
			*)	echo "Unknown argument"
				echo "Exiting..."
				exit;;
		esac
	done
fi

# Configuration paths
DefaultTemplate="default"
[ -d "$LocalDataPath"/templates/"$DefaultTemplate" ] && DefaultTemplate="$LocalDataPath"/templates/"$DefaultTemplate" || DefaultTemplate="$SystemDataPath"/templates/"$DefaultTemplate"
echo "Default Template" "$DefaultTemplate"
if  [ -d "$LocalDataPath"/templates/"$PGTemplate" ] ; then
	Template="$LocalDataPath"/templates/"$PGTemplate"
elif [ -d "$SystemDataPath"/templates/"$PGTemplate" ]; then
	Template="$SystemDataPath"/templates/"$PGTemplate"
else
	echo "Template "$PGTemplate" is missing. Exiting..."
	exit;
fi
echo "Template" "$Template"

# Template="$LocalDataPath"/templates/"$PGTemplate"
DefaultResources="$DefaultTemplate"/resources
Resources="$Template"/resources

echo "Transforming " $Template

CreateWorkDir
echo -e "$PrettygrubHeading" > "$WorkDir"/theme.txt
if  FileExists "$Template"/theme.txt ; then
	cat "$Template"/theme.txt >> "$WorkDir"/theme.txt
else
	cat "$DefaultTemplate"/theme.txt >> "$WorkDir"/theme.txt
	echo "Template file(s) missing. Using default."
fi

if [ -r "$DefaultTemplate"/default.conf ]; then . "$DefaultTemplate"/default.conf; fi
if [ -r "$Template"/default.conf ]; then . "$Template"/default.conf; fi
if [ ! $CustomAspectRatio = "" ]; then AspectRatio=$CustomAspectRatio; fi
if [ ! $CustomGrubResolution = "" ]; then GrubResolution=$CustomGrubResolution; fi
if [ -r "$DefaultTemplate"/"$AspectRatio".conf ]; then . "$DefaultTemplate"/"$AspectRatio".conf; fi
if [ -r "$DefaultTemplate"/"$GrubResolution".conf ]; then . "$DefaultTemplate"/"$GrubResolution".conf ; fi
if [ -r "$Template"/default.conf ]; then . "$Template"/default.conf; fi
if [ -r "$Template"/"$AspectRatio".conf ]; then . "$Template"/"$AspectRatio".conf; fi
if [ -r "$Template"/"$GrubResolution".conf ]; then . "$Template"/"$GrubResolution".conf ; fi

# Apply command-line overrides
HorizontalGrub=${CustomHorizontalGrub-$HorizontalGrub}
AutoActions=${CustomAutoActions-$AutoActions}
# Write settings and copy resources to theme temp folder

PickResources "logos" "PG_PGLogo" $PGLogo
PickResources "wallpapers" "PG_WallpaperImage" $WallpaperImage
PickResources "SETTING" "PG_HelpTextLength" $HelpTextLength

PickResources "icons" "PG_DistroIcons" $DistroIcons

PickResources "menu" "PG_MainMenuBitmaps" $MainMenuBitmaps
PickResources "menuitem" "PG_MainMenuItemBitmaps" $MainMenuItemBitmaps
PickResources "selected" "PG_MainMenuSelectedBitmaps" $MainMenuSelectedBitmaps

PickResources "clock" "PG_ClockCenterImage" $ClockCenterImage
PickResources "clock" "PG_ClockTickImage" $ClockTickImage
PickResources "SETTING" "PG_ClockWidth" $ClockWidth
PickResources "SETTING" "PG_ClockHeight" $ClockHeight

PickResources "fonts" "PG_TerminalFont" $TerminalFont
PickResources "terminal" "PG_TerminalBitmaps" $TerminalBitmaps
PickResources "fonts" "PG_MainMenuItemFont" $MainMenuItemFont
PickResources "fonts" "PG_MainMenuSelectedItemFont" $MainMenuSelectedItemFont
PickResources "fonts" "PG_HelpFont" $HelpFont

PickResources "SETTING" "PG_MainMenuLeft" $MainMenuLeft
PickResources "SETTING" "PG_MainMenuTop" $MainMenuTop
PickResources "SETTING" "PG_MainMenuHeight" $MainMenuHeight
PickResources "SETTING" "PG_MainMenuWidth" $MainMenuWidth
PickResources "SETTING" "PG_MainMenuItemHeight" $MainMenuItemHeight
PickResources "SETTING" "PG_MainMenuItemSpacing" $MainMenuItemSpacing
PickResources "SETTING" "PG_MainMenuIconHeight" $MainMenuIconHeight
PickResources "SETTING" "PG_MainMenuIconWidth" $MainMenuIconWidth
PickResources "SETTING" "PG_MainMenuItemIconSpace" $MainMenuItemIconSpace
#PG_MainMenuItemHeight
PickResources "SETTING" "PG_ClockTop" $ClockTop
PickResources "SETTING" "PG_ClockLeft" $ClockLeft
PickResources "SETTING" "PG_ClockNumTicks" $ClockNumTicks
PickResources "SETTING" "PG_ClockTicksDisappear" $ClockTicksDisappear

PickResources "SETTING" "PG_HelpTop" $HelpTop
PickResources "SETTING" "PG_HelpLeft" $HelpLeft
PickResources "SETTING" "PG_HelpWidth" $HelpWidth
PickResources "SETTING" "PG_HelpHeight" $HelpHeight
PickResources "SETTING" "PG_HelpAlign" $HelpAlign

PickResources "SETTING" "PG_LogoTop" $LogoTop
PickResources "SETTING" "PG_LogoLeft" $LogoLeft
PickResources "SETTING" "PG_LogoWidth" $LogoWidth
PickResources "SETTING" "PG_LogoHeight" $LogoHeight
PickResources "SETTING" "PG_TopMenuIconHeight" $TopMenuIconHeight
PickResources "SETTING" "PG_TopMenuIconWidth" $TopMenuIconWidth
PickResources "SETTING" "PG_TopMenuLeft" $TopMenuLeft
PickResources "SETTING" "PG_TopMenuTop" $TopMenuTop
PickResources "SETTING" "PG_TopMenuWidth" $TopMenuWidth
PickResources "SETTING" "PG_TopMenuHeight" $TopMenuHeight

PickResources "SETTING" "PG_DesktopColor" $DesktopColor
PickResources "SETTING" "PG_TopMenuColor" $TopMenuColor
PickResources "SETTING" "PG_MainMenuItemColor" $MainMenuItemColor
PickResources "SETTING" "PG_MainMenuSelectedItemColor" $MainMenuSelectedItemColor
PickResources "SETTING" "PG_HelpColor" $HelpColor


function PGSaveTheme {
if [ "$1" = "local" ]; then
	ThemeFolder="$LocalDataPath"/themes
elif [ "$1" = "system" ]; then
	ThemeFolder="$SystemDataPath"/themes
else
	return 1;
fi
NewGrubTheme="$PGTemplate"
if [ -d "$ThemeFolder"/"$NewGrubTheme" ]; then
	i=1
	until ! [ -d "$LocalDataPath"/themes/"$NewGrubTheme"-"$i" ]; do (( i++ )); done
	NewGrubTheme="$NewGrubTheme"-"$i"
fi
if [ ! $IAMROOT ] &&  [ "$1" = "system" ]; then
	sudo mkdir -p "$ThemeFolder"/"$NewGrubTheme"
	sudo cp -r "$WorkDir"/* "$ThemeFolder"/"$NewGrubTheme"/
else
	mkdir -p "$ThemeFolder"/"$NewGrubTheme"
	cp -r "$WorkDir"/* "$ThemeFolder"/"$NewGrubTheme"/
fi
if [ "$?" -ne 0 ]; then
	echo "Theme folder creation failed!..."
	return 1;
fi
echo "
The new grub theme has been succesfully created and saved at " "$ThemeFolder"/"$NewGrubTheme"
}

function PGSetActiveTheme {
	#if [ "$1" = "normal" ]; then
		GrubThemesFolder=/boot/grub/themes
	#elif [ "$1" = "system" ]; then
		#ThemeFolder="$SystemDataPath"/themes
	#else
	#	return 1;
	#fi
	NewActiveGrubTheme="$PGTemplate"
	if [ -d "$GrubThemesFolder"/"$NewActiveGrubTheme" ]; then
		i=1
		until ! [ -d "$GrubThemesFolder"/"$NewActiveGrubTheme"-"$i" ]; do (( i++ )); done
		NewActiveGrubTheme="$NewActiveGrubTheme"-"$i"
	fi
	ActiveGrubTheme=$(grep -e "^GRUB_THEME=" /etc/default/grub | cut -d= -f2)
	ActiveGrubTheme=${ActiveGrubTheme%"/theme.txt"}
	echo $ActiveGrubTheme
	echo "$GrubThemesFolder"/"$NewActiveGrubTheme"/theme.txt
## TODO confirm sed command to edit new theme setting for grub (before run grub)
	if [ ! $IAMROOT ]; then
		sudo mkdir -p "$GrubThemesFolder"/"$NewActiveGrubTheme"
		sudo cp -r  "$ThemeFolder"/"$NewGrubTheme"/* "$GrubThemesFolder"/"$NewActiveGrubTheme"/
		if ! [ "$ActiveGrubTheme" = "" ] && ! [ "$ActiveGrubTheme" = "$NewActiveGrubTheme" ]; then
			#sudo sed -i '/^GRUB_THEME=/ s/[[:print:]]*/GRUB_THEME=\"'$GrubThemesFolder/$NewActiveGrubTheme'/theme.txt\"/ ' /etc/default/grub
			sudo sed  -i -E '\%^\s{0,}GRUB_THEME=%c GRUB_THEME="'$GrubThemesFolder/$NewActiveGrubTheme'/theme.txt"' /etc/default/grub
		else
			echo "$GrubThemesFolder"/"$NewActiveGrubTheme"/theme.txt
			sudo echo GRUB_THEME="$GrubThemesFolder"/"$NewActiveGrubTheme"/theme.txt >>  /etc/default/grub
		fi
		grep "GRUB_THEME=" /etc/default/grub
		#exit;
		sudo grub-mkconfig -o /boot/grub/grub.cfg
		[ $HorizontalGrub = "true" ] && sudo horizontal-grub
	else
		mkdir -p "$GrubThemesFolder"/"$NewActiveGrubTheme"
		cp -r  "$ThemeFolder"/"$NewGrubTheme"/* "$GrubThemesFolder"/"$NewActiveGrubTheme"/
		if ! [ "$ActiveGrubTheme" = "" ] && ! [ "$ActiveGrubTheme" = "$NewActiveGrubTheme" ]; then
			#sudo sed -i '/^GRUB_THEME=/ s/[[:print:]]*/GRUB_THEME=\"'$GrubThemesFolder/$NewActiveGrubTheme'/theme.txt\"/ ' /etc/default/grub
			sed  -i -E '\%^\s{0,}GRUB_THEME=%c GRUB_THEME="'$GrubThemesFolder/$NewActiveGrubTheme'/theme.txt"' /etc/default/grub
		else
			echo "$GrubThemesFolder"/"$NewActiveGrubTheme"/theme.txt
			echo GRUB_THEME="$GrubThemesFolder"/"$NewActiveGrubTheme"/theme.txt >>  /etc/default/grub
		fi
		grep "GRUB_THEME=" /etc/default/grub
		#exit;
		grub-mkconfig -o /boot/grub/grub.cfg
		[ $HorizontalGrub = "true" ] && horizontal-grub
	fi
	ActiveGrubTheme=$(grep -e "^GRUB_THEME=" /etc/default/grub | cut -d= -f2)
	if ! [ $ActiveGrubTheme = \""$GrubThemesFolder"/"$NewActiveGrubTheme"/theme.txt\" ]; then
		echo "Theme activation failed!..."
		echo "Active theme is " $ActiveGrubTheme
		return 1;
	fi
	echo "
	The new grub theme has been succesfully activated and saved at " "$GrubThemesFolder"/"$ActiveGrubTheme"
}


#  SaveLocal, SaveSystem, SetActiveTheme

case "${AutoActions-"SaveLocal"}" in
	SaveLocal) PGSaveTheme "local"
	;;
	SaveSystem) PGSaveTheme "system"
	;;
	SetActiveTheme) PGSaveTheme "system"
		[ "$?" -ne 0 ] && ( echo "Failed to save theme at system folder" \c ; exit; )
		[ $HorizontalGrub = "true" ] && [ ! $(which horizontal-grub) ] && echo "horizontal-grub was not found. Install it and set grub theme manually." \c
		PGSetActiveTheme
	;;
	*) echo "No actions defined"
	;;
	esac
# [ $? -eq 0 ] && ThemeSaved=true || echo "Error saving theme. Error Number " "$?"
exit;
